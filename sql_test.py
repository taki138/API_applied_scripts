import sys

import f
import vertica_python

import config
from core_functions import konnektivePurchaseQuery

SQLRequest = """
SELECT distinct(bi.konn_customerId), bi.konn_emailAddress, bi.konn_phoneNumber, bi.konn_merchantId, bi.konn_purchaseId, bi.konn_cardBin
FROM konn.bill_info AS bi
Where bi.konn_expDate > '2019-09-01 00:00:00.000000'
  AND bi.konn_expDate < '2019-10-01 00:00:00.000000'
  AND (bi.konn_status = 'ACTIVE' OR bi.konn_status = 'TRIAL' OR bi.konn_status = 'RECYCLE_BILLING')
group by bi.konn_customerId, bi.konn_emailAddress, bi.konn_phoneNumber, bi.konn_merchantId, bi.konn_purchaseId, bi.konn_cardBin
LIMIT 10;
"""

conn_info = {
	'host': config.vertica_DB_host,
	'port': config.vertica_DB_port,
	'user': config.vertica_DB_login,
	'password': config.vertica_DB_password,
	'database': config.vertica_DB_dbname,
	'connection_timeout': 10,
	'unicode_error': 'strict',
	'ssl': False,
	'use_prepared_statements': False,
	}


@f.pcall_wraps
def SQL_SELECT_from_vertica(SQLRequest, conn_info):
	this_function_name = sys._getframe().f_code.co_name
	print(f"{this_function_name} started")
	conn_info = {
		'host': conn_info['host'],
		'port': conn_info['port'],
		'user': conn_info['user'],
		'password': conn_info['password'],
		'database': conn_info['database'],
		# autogenerated session label by default,
		# 'session_label': 'some_label',
		# default throw error on invalid UTF-8 results
		'unicode_error': conn_info['unicode_error'],
		# SSL is disabled by default
		'ssl': conn_info['ssl'],
		# using server-side prepared statements is disabled by default
		'use_prepared_statements': conn_info['use_prepared_statements'],
		# connection timeout is not enabled by default
		'connection_timeout': conn_info['connection_timeout']
		}

	resultSQLList = []

	with vertica_python.connect(**conn_info) as connection:
		cur = connection.cursor()
		cur.execute(SQLRequest)
		for row in cur.iterate():
			resultSQLList.append(row)
		cur.close()
		connection.close()
	connection.close()
	print(f"{this_function_name} fullfilled")
	return resultSQLList

def SQL_SELECT_from_vertica(SQLRequest, conn_info):
	resultSQLList = SQL_SELECT_from_vertica(SQLRequest, conn_info)
	def resultSQLListIterator(resultSQLList):
		return resultSQLList
	print(resultSQLListIterator(resultSQLList))

SQL_SELECT_from_vertica(SQLRequest, conn_info)




